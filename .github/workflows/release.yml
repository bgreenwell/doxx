name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create archive
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../../doxx-${{ matrix.target }}.zip doxx.exe
        else
          tar czf ../../../doxx-${{ matrix.target }}.tar.gz doxx
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: doxx-${{ matrix.target }}
        path: |
          doxx-${{ matrix.target }}.tar.gz
          doxx-${{ matrix.target }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate changelog
      shell: bash
      run: |
        # Extract changelog for this version
        VERSION=${GITHUB_REF#refs/tags/}
        echo "## Release $VERSION" > release-notes.md
        echo "" >> release-notes.md
        
        # Add installation instructions
        echo "### Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "Download the appropriate binary for your platform from the assets below." >> release-notes.md
        echo "" >> release-notes.md
        echo "### Changes" >> release-notes.md
        
        # Try to extract from CHANGELOG.md if it exists
        if [ -f CHANGELOG.md ]; then
          awk '/^## \[Unreleased\]/{flag=1; next} /^## /{if(flag) exit} flag' CHANGELOG.md >> release-notes.md
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          doxx-*/doxx-*.tar.gz
          doxx-*/doxx-*.zip
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to Crates.io
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}